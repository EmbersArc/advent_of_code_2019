// returns digits in reversed order in vector of size 5: 123 -> [0,0,3,2,1]
fn get_digits(number: i32) -> Vec<i32> {
    let mut digits = vec![0; 5];
    let mut n = number;
    let mut i = 0;
    while n > 9 {
        digits[i] = n % 10;
        n = n / 10;
        i += 1;
    }
    digits[i] = n;

    digits
}

// fn get_test_input() -> Vec<i32> {
//     vec![
//         3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0, 0,
//         1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20,
//         1105, 1, 46, 98, 99,
//     ]
// }

fn get_input() -> Vec<i32> {
    vec![
        3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1102, 27, 28, 225, 1, 113, 14, 224, 1001,
        224, -34, 224, 4, 224, 102, 8, 223, 223, 101, 7, 224, 224, 1, 224, 223, 223, 1102, 52, 34,
        224, 101, -1768, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224, 1, 223, 224, 223,
        1002, 187, 14, 224, 1001, 224, -126, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1,
        224, 223, 223, 1102, 54, 74, 225, 1101, 75, 66, 225, 101, 20, 161, 224, 101, -54, 224, 224,
        4, 224, 1002, 223, 8, 223, 1001, 224, 7, 224, 1, 224, 223, 223, 1101, 6, 30, 225, 2, 88,
        84, 224, 101, -4884, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 2, 224, 224, 1, 224, 223,
        223, 1001, 214, 55, 224, 1001, 224, -89, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224,
        1, 224, 223, 223, 1101, 34, 69, 225, 1101, 45, 67, 224, 101, -112, 224, 224, 4, 224, 102,
        8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1102, 9, 81, 225, 102, 81, 218, 224, 101,
        -7290, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1101, 84,
        34, 225, 1102, 94, 90, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1,
        99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274,
        1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0,
        1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0,
        1105, 1, 99999, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 329, 101, 1, 223, 223,
        1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 101, 1, 223, 223, 1008, 677, 677,
        224, 102, 2, 223, 223, 1005, 224, 359, 101, 1, 223, 223, 8, 226, 677, 224, 1002, 223, 2,
        223, 1006, 224, 374, 101, 1, 223, 223, 108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224,
        389, 1001, 223, 1, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 404, 1001, 223,
        1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 419, 101, 1, 223, 223, 1107, 677,
        226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 1107, 226, 226, 224, 1002,
        223, 2, 223, 1006, 224, 449, 101, 1, 223, 223, 1108, 226, 226, 224, 1002, 223, 2, 223,
        1005, 224, 464, 101, 1, 223, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 479, 101,
        1, 223, 223, 8, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 494, 1001, 223, 1, 223, 1007,
        226, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 1001, 223, 1, 223, 108, 226, 226, 224,
        1002, 223, 2, 223, 1006, 224, 524, 1001, 223, 1, 223, 1108, 677, 226, 224, 102, 2, 223,
        223, 1006, 224, 539, 101, 1, 223, 223, 1008, 677, 226, 224, 102, 2, 223, 223, 1006, 224,
        554, 101, 1, 223, 223, 107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 569, 101, 1, 223,
        223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 584, 101, 1, 223, 223, 7, 677, 226,
        224, 102, 2, 223, 223, 1005, 224, 599, 101, 1, 223, 223, 1008, 226, 226, 224, 1002, 223, 2,
        223, 1005, 224, 614, 1001, 223, 1, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224,
        629, 101, 1, 223, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 644, 1001, 223, 1,
        223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 659, 101, 1, 223, 223, 108, 677,
        677, 224, 102, 2, 223, 223, 1005, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226,
    ]
}

fn solve_program(program: &mut Vec<i32>, inputs: Vec<i32>) -> Vec<i32> {
    let mut output = Vec::new();
    let mut pos: usize = 0;
    let mut input_pos = 0;
    while program[pos] != 99 {
        let digits = get_digits(program[pos]);
        let opcode = 10 * digits[1] + digits[0];
        let mode_par1 = digits[2];
        let mode_par2 = digits[3];
        let mode_par3 = digits[4]; // will never be immediate
        if mode_par3 != 0 {
            panic!("What");
        }

        match opcode {
            1 | 2 | 7 | 8 => {
                let input_1 = match mode_par1 {
                    0 => program[program[pos + 1] as usize],
                    _ => program[pos + 1], // 1
                };
                let input_2 = match mode_par2 {
                    0 => program[program[pos + 2] as usize],
                    _ => program[pos + 2], // 1
                };


                let to = program[pos + 3] as usize;

                if opcode == 1 {
                    // add
                    program[to] = input_1 + input_2;
                } else if opcode == 2 {
                    // multiply
                    program[to] = input_1 * input_2;
                } else if opcode == 7 {
                    // less than
                    program[to] = (input_1 < input_2) as i32;
                } else if opcode == 8 {
                    // equals
                    program[to] = (input_1 == input_2) as i32;
                }

                pos += 4;
            }
            3 => {
                //input
                let to = program[pos + 1] as usize;
                program[to] = inputs[input_pos];
                input_pos += 1;
                pos += 2;
            }
            4 => {
                // output
                let input_1 = match mode_par1 {
                    0 => program[program[pos + 1] as usize],
                    _ => program[pos + 1], // 1
                };

                output.push(input_1);
                pos += 2;
            }
            5 | 6 => {
                let input_1 = match mode_par1 {
                    0 => program[program[pos + 1] as usize],
                    _ => program[pos + 1], // 1
                };
                let input_2 = match mode_par2 {
                    0 => program[program[pos + 2] as usize],
                    _ => program[pos + 2], // 1
                };

                if opcode == 5 {
                    // jump if true
                    if input_1 != 0 {
                        pos = input_2 as usize;
                    } else {
                        pos += 3;
                    }
                } else if opcode == 6 {
                    // jump if false
                    if input_1 == 0 {
                        pos = input_2 as usize;
                    } else {
                        pos += 3;
                    }
                }
            }
            _ => panic!("Invalid opcode '{}'!", opcode),
        }
    }

    output
}

fn pt1() {
    let mut program = get_input();

    let input = vec![1];

    let output = solve_program(&mut program, input);

    println!("Solution Part 1: {:?}", output);
}

fn pt2() {
    let mut program = get_input();

    let input = vec![5];

    let output = solve_program(&mut program, input);

    println!("Solution Part 2: {:?}", output);
}

fn main() {
    pt1();
    pt2();
}
